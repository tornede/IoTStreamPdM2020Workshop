/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */

plugins {
	id 'java'
	id 'eclipse-wtp'
}

repositories {
    mavenCentral()
	mavenLocal()
	maven { url "https://jitpack.io" }
	maven { url "http://clojars.org/repo/" }
	maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    compile ('ai.libs:mlplan-sklearn') {
    	exclude group: 'mysql', module: 'mysql-connector-java'
    }
    compile ('ai.libs:mlplan-gui'){
    	exclude group: 'mysql', module: 'mysql-connector-java'
    }
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.25'
}

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
        }
        resources {
			srcDir 'resources'
			srcDir 'conf'
		}
	}
    test {
		java {
			srcDir 'src/test/java'
		}
	}
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

task buildSearchSpaceConfigurationChecker(type: Jar) {
    manifest {
 		attributes 'Main-Class': 'ICML2020.AutoML.search.SearchSpaceConfigurationChecker'
    }
    zip64 = true
    baseName = 'searchSpacenConfigChecker'
    from { 
    	configurations.compile.collect { 
    		it.isDirectory() ? it : zipTree(it) 
    	}
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

task builExperimenter(type: Jar) {
    manifest {
 		attributes 'Main-Class': 'ICML2020.AutoML.experiment.Experimenter'
    }
    zip64 = true
    baseName = 'Experimenter'
    from { 
    	configurations.compile.collect { 
    		it.isDirectory() ? it : zipTree(it) 
    	}
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

task buildReevaluation(type: Jar) {
    manifest {
 		attributes 'Main-Class': 'ICML2020.AutoML.EvaluateResultingPipeline'
    }
    zip64 = true
    baseName = 'ReEvaluatePipelines'
    from { 
    	configurations.compile.collect { 
    		it.isDirectory() ? it : zipTree(it) 
    	}
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}
